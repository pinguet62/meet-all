package fr.pinguet62.meetall.security;

import com.auth0.jwt.exceptions.JWTVerificationException;
import com.auth0.jwt.interfaces.DecodedJWT;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.authentication.ReactiveAuthenticationManager;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;
import reactor.core.publisher.Mono;

import java.util.function.Function;

/**
 * Convert {@link BearerTokenAuthenticationToken} generated by base technical layer,
 * to {@link ApplicationAuthentication} for the proper functioning of the application.
 */
@Slf4j
@RequiredArgsConstructor
public class ApplicationAuthenticationManager implements ReactiveAuthenticationManager {

    @NonNull
    private final Function<String, DecodedJWT> jwtDecoder;

    @Override
    public Mono<Authentication> authenticate(Authentication authentication) throws AuthenticationException {
        if (!(authentication instanceof BearerTokenAuthenticationToken)) {
            return Mono.just(authentication);
        }
        BearerTokenAuthenticationToken jwtAuthentication = (BearerTokenAuthenticationToken) authentication;

        String jwtToken = jwtAuthentication.getToken();
        DecodedJWT decodedJWT;
        try {
            decodedJWT = jwtDecoder.apply(jwtToken);
        } catch (JWTVerificationException e) {
            log.debug("JWT validation and conversion fail", e);
            return Mono.just(authentication);
        }

        String userId = decodedJWT.getSubject();
        Authentication converted = new ApplicationAuthentication(userId);
        return Mono.just(converted);
    }

}
